<?php
/**
 * Image
 *
 * PHP version 5
 *
 * @category Class
 * @package  VisWiz\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisWiz.io API Documentation
 *
 * The SDK allows you to query and create new projects, builds or images within the VisWiz service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VisWiz\SDK\Model;

use \ArrayAccess;
use \VisWiz\SDK\ObjectSerializer;

/**
 * Image Class Doc Comment
 *
 * @category Class
 * @package  VisWiz\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Image implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Image';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
        'createdAt' => '\DateTime',
        'height' => 'int',
        'originalURL' => 'string',
        'originalURLWebP' => 'string',
        'thumbURL' => 'string',
        'thumbURLWebP' => 'string',
        'width' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
        'createdAt' => 'date-time',
        'height' => 'int32',
        'originalURL' => null,
        'originalURLWebP' => null,
        'thumbURL' => null,
        'thumbURLWebP' => null,
        'width' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'createdAt' => 'createdAt',
        'height' => 'height',
        'originalURL' => 'originalURL',
        'originalURLWebP' => 'originalURLWebP',
        'thumbURL' => 'thumbURL',
        'thumbURLWebP' => 'thumbURLWebP',
        'width' => 'width'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'createdAt' => 'setCreatedAt',
        'height' => 'setHeight',
        'originalURL' => 'setOriginalURL',
        'originalURLWebP' => 'setOriginalURLWebP',
        'thumbURL' => 'setThumbURL',
        'thumbURLWebP' => 'setThumbURLWebP',
        'width' => 'setWidth'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'createdAt' => 'getCreatedAt',
        'height' => 'getHeight',
        'originalURL' => 'getOriginalURL',
        'originalURLWebP' => 'getOriginalURLWebP',
        'thumbURL' => 'getThumbURL',
        'thumbURLWebP' => 'getThumbURLWebP',
        'width' => 'getWidth'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['originalURL'] = isset($data['originalURL']) ? $data['originalURL'] : null;
        $this->container['originalURLWebP'] = isset($data['originalURLWebP']) ? $data['originalURLWebP'] : null;
        $this->container['thumbURL'] = isset($data['thumbURL']) ? $data['thumbURL'] : null;
        $this->container['thumbURLWebP'] = isset($data['thumbURLWebP']) ? $data['thumbURLWebP'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The identifing name of the image
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date and time the image was created
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets height
     *
     * @return int
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param int $height The height of the image
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets originalURL
     *
     * @return string
     */
    public function getOriginalURL()
    {
        return $this->container['originalURL'];
    }

    /**
     * Sets originalURL
     *
     * @param string $originalURL The URL for the original image
     *
     * @return $this
     */
    public function setOriginalURL($originalURL)
    {
        $this->container['originalURL'] = $originalURL;

        return $this;
    }

    /**
     * Gets originalURLWebP
     *
     * @return string
     */
    public function getOriginalURLWebP()
    {
        return $this->container['originalURLWebP'];
    }

    /**
     * Sets originalURLWebP
     *
     * @param string $originalURLWebP The URL for the original image in WebP format
     *
     * @return $this
     */
    public function setOriginalURLWebP($originalURLWebP)
    {
        $this->container['originalURLWebP'] = $originalURLWebP;

        return $this;
    }

    /**
     * Gets thumbURL
     *
     * @return string
     */
    public function getThumbURL()
    {
        return $this->container['thumbURL'];
    }

    /**
     * Sets thumbURL
     *
     * @param string $thumbURL The URL for the thumbnail image
     *
     * @return $this
     */
    public function setThumbURL($thumbURL)
    {
        $this->container['thumbURL'] = $thumbURL;

        return $this;
    }

    /**
     * Gets thumbURLWebP
     *
     * @return string
     */
    public function getThumbURLWebP()
    {
        return $this->container['thumbURLWebP'];
    }

    /**
     * Sets thumbURLWebP
     *
     * @param string $thumbURLWebP The URL for the thumbnail image in WebP format
     *
     * @return $this
     */
    public function setThumbURLWebP($thumbURLWebP)
    {
        $this->container['thumbURLWebP'] = $thumbURLWebP;

        return $this;
    }

    /**
     * Gets width
     *
     * @return int
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param int $width The width of the image
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


