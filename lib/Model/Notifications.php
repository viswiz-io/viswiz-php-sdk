<?php
/**
 * Notifications
 *
 * PHP version 5
 *
 * @category Class
 * @package  VisWiz\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisWiz.io API Documentation
 *
 * The SDK allows you to query and create new projects, builds or images within the VisWiz service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VisWiz\SDK\Model;

use \ArrayAccess;
use \VisWiz\SDK\ObjectSerializer;

/**
 * Notifications Class Doc Comment
 *
 * @category Class
 * @package  VisWiz\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Notifications implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Notifications';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'emailEnabled' => 'bool',
        'slackEnabled' => 'bool',
        'slackURL' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'emailEnabled' => null,
        'slackEnabled' => null,
        'slackURL' => 'url'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'emailEnabled' => 'emailEnabled',
        'slackEnabled' => 'slackEnabled',
        'slackURL' => 'slackURL'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'emailEnabled' => 'setEmailEnabled',
        'slackEnabled' => 'setSlackEnabled',
        'slackURL' => 'setSlackURL'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'emailEnabled' => 'getEmailEnabled',
        'slackEnabled' => 'getSlackEnabled',
        'slackURL' => 'getSlackURL'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['emailEnabled'] = isset($data['emailEnabled']) ? $data['emailEnabled'] : null;
        $this->container['slackEnabled'] = isset($data['slackEnabled']) ? $data['slackEnabled'] : null;
        $this->container['slackURL'] = isset($data['slackURL']) ? $data['slackURL'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets emailEnabled
     *
     * @return bool
     */
    public function getEmailEnabled()
    {
        return $this->container['emailEnabled'];
    }

    /**
     * Sets emailEnabled
     *
     * @param bool $emailEnabled Controls if email reports are sent on new builds
     *
     * @return $this
     */
    public function setEmailEnabled($emailEnabled)
    {
        $this->container['emailEnabled'] = $emailEnabled;

        return $this;
    }

    /**
     * Gets slackEnabled
     *
     * @return bool
     */
    public function getSlackEnabled()
    {
        return $this->container['slackEnabled'];
    }

    /**
     * Sets slackEnabled
     *
     * @param bool $slackEnabled Controls if Slack notifications are sent on new builds
     *
     * @return $this
     */
    public function setSlackEnabled($slackEnabled)
    {
        $this->container['slackEnabled'] = $slackEnabled;

        return $this;
    }

    /**
     * Gets slackURL
     *
     * @return string
     */
    public function getSlackURL()
    {
        return $this->container['slackURL'];
    }

    /**
     * Sets slackURL
     *
     * @param string $slackURL The Slack webhook URL to use for sending notifications
     *
     * @return $this
     */
    public function setSlackURL($slackURL)
    {
        $this->container['slackURL'] = $slackURL;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


