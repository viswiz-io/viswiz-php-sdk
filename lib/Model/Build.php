<?php
/**
 * Build
 *
 * PHP version 5
 *
 * @category Class
 * @package  VisWiz\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * VisWiz.io API Documentation
 *
 * The SDK allows you to query and create new projects, builds or images within the VisWiz service.
 *
 * OpenAPI spec version: 1.1.0
 * Contact: support@viswiz.io
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace VisWiz\SDK\Model;

use \ArrayAccess;
use \VisWiz\SDK\ObjectSerializer;

/**
 * Build Class Doc Comment
 *
 * @category Class
 * @package  VisWiz\SDK
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Build implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Build';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'branch' => 'string',
        'comparisonID' => 'string',
        'createdAt' => '\DateTime',
        'diffedAt' => '\DateTime',
        'diffImagesCount' => 'int',
        'diffPercentage' => 'float',
        'id' => 'string',
        'imagesCount' => 'float',
        'name' => 'string',
        'projectID' => 'int',
        'revision' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'branch' => null,
        'comparisonID' => null,
        'createdAt' => 'date-time',
        'diffedAt' => 'date-time',
        'diffImagesCount' => 'int32',
        'diffPercentage' => 'float',
        'id' => null,
        'imagesCount' => 'int32',
        'name' => null,
        'projectID' => 'int32',
        'revision' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'branch' => 'branch',
        'comparisonID' => 'comparisonID',
        'createdAt' => 'createdAt',
        'diffedAt' => 'diffedAt',
        'diffImagesCount' => 'diffImagesCount',
        'diffPercentage' => 'diffPercentage',
        'id' => 'id',
        'imagesCount' => 'imagesCount',
        'name' => 'name',
        'projectID' => 'projectID',
        'revision' => 'revision'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'branch' => 'setBranch',
        'comparisonID' => 'setComparisonID',
        'createdAt' => 'setCreatedAt',
        'diffedAt' => 'setDiffedAt',
        'diffImagesCount' => 'setDiffImagesCount',
        'diffPercentage' => 'setDiffPercentage',
        'id' => 'setId',
        'imagesCount' => 'setImagesCount',
        'name' => 'setName',
        'projectID' => 'setProjectID',
        'revision' => 'setRevision'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'branch' => 'getBranch',
        'comparisonID' => 'getComparisonID',
        'createdAt' => 'getCreatedAt',
        'diffedAt' => 'getDiffedAt',
        'diffImagesCount' => 'getDiffImagesCount',
        'diffPercentage' => 'getDiffPercentage',
        'id' => 'getId',
        'imagesCount' => 'getImagesCount',
        'name' => 'getName',
        'projectID' => 'getProjectID',
        'revision' => 'getRevision'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['branch'] = isset($data['branch']) ? $data['branch'] : null;
        $this->container['comparisonID'] = isset($data['comparisonID']) ? $data['comparisonID'] : null;
        $this->container['createdAt'] = isset($data['createdAt']) ? $data['createdAt'] : null;
        $this->container['diffedAt'] = isset($data['diffedAt']) ? $data['diffedAt'] : null;
        $this->container['diffImagesCount'] = isset($data['diffImagesCount']) ? $data['diffImagesCount'] : null;
        $this->container['diffPercentage'] = isset($data['diffPercentage']) ? $data['diffPercentage'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['imagesCount'] = isset($data['imagesCount']) ? $data['imagesCount'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['projectID'] = isset($data['projectID']) ? $data['projectID'] : null;
        $this->container['revision'] = isset($data['revision']) ? $data['revision'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets branch
     *
     * @return string
     */
    public function getBranch()
    {
        return $this->container['branch'];
    }

    /**
     * Sets branch
     *
     * @param string $branch The branch which contains the build
     *
     * @return $this
     */
    public function setBranch($branch)
    {
        $this->container['branch'] = $branch;

        return $this;
    }

    /**
     * Gets comparisonID
     *
     * @return string
     */
    public function getComparisonID()
    {
        return $this->container['comparisonID'];
    }

    /**
     * Sets comparisonID
     *
     * @param string $comparisonID The build ID which is used for comparison with the build
     *
     * @return $this
     */
    public function setComparisonID($comparisonID)
    {
        $this->container['comparisonID'] = $comparisonID;

        return $this;
    }

    /**
     * Gets createdAt
     *
     * @return \DateTime
     */
    public function getCreatedAt()
    {
        return $this->container['createdAt'];
    }

    /**
     * Sets createdAt
     *
     * @param \DateTime $createdAt The date and time the build was created
     *
     * @return $this
     */
    public function setCreatedAt($createdAt)
    {
        $this->container['createdAt'] = $createdAt;

        return $this;
    }

    /**
     * Gets diffedAt
     *
     * @return \DateTime
     */
    public function getDiffedAt()
    {
        return $this->container['diffedAt'];
    }

    /**
     * Sets diffedAt
     *
     * @param \DateTime $diffedAt The date and time the build was compared
     *
     * @return $this
     */
    public function setDiffedAt($diffedAt)
    {
        $this->container['diffedAt'] = $diffedAt;

        return $this;
    }

    /**
     * Gets diffImagesCount
     *
     * @return int
     */
    public function getDiffImagesCount()
    {
        return $this->container['diffImagesCount'];
    }

    /**
     * Sets diffImagesCount
     *
     * @param int $diffImagesCount The number of different images in the build
     *
     * @return $this
     */
    public function setDiffImagesCount($diffImagesCount)
    {
        $this->container['diffImagesCount'] = $diffImagesCount;

        return $this;
    }

    /**
     * Gets diffPercentage
     *
     * @return float
     */
    public function getDiffPercentage()
    {
        return $this->container['diffPercentage'];
    }

    /**
     * Sets diffPercentage
     *
     * @param float $diffPercentage The difference percentage for the build
     *
     * @return $this
     */
    public function setDiffPercentage($diffPercentage)
    {
        $this->container['diffPercentage'] = $diffPercentage;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets imagesCount
     *
     * @return float
     */
    public function getImagesCount()
    {
        return $this->container['imagesCount'];
    }

    /**
     * Sets imagesCount
     *
     * @param float $imagesCount The total number images in the build
     *
     * @return $this
     */
    public function setImagesCount($imagesCount)
    {
        $this->container['imagesCount'] = $imagesCount;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name (commit title) for the build
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets projectID
     *
     * @return int
     */
    public function getProjectID()
    {
        return $this->container['projectID'];
    }

    /**
     * Sets projectID
     *
     * @param int $projectID The project ID which owns the build
     *
     * @return $this
     */
    public function setProjectID($projectID)
    {
        $this->container['projectID'] = $projectID;

        return $this;
    }

    /**
     * Gets revision
     *
     * @return string
     */
    public function getRevision()
    {
        return $this->container['revision'];
    }

    /**
     * Sets revision
     *
     * @param string $revision The revision for the build
     *
     * @return $this
     */
    public function setRevision($revision)
    {
        $this->container['revision'] = $revision;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


